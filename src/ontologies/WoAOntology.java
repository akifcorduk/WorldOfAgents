// file: WoAOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ontologies;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: WoAOntology.java
 * @author ontology bean generator
 * @version 2018/05/13, 17:48:14
 */
public class WoAOntology extends jade.content.onto.Ontology  {
    //NAME
    public static final String ONTOLOGY_NAME = "WoA";
    // The singleton instance of this ontology
    private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
    private static Ontology theInstance = new WoAOntology();
    public static Ontology getInstance() {
        return theInstance;
    }


    // VOCABULARY
    public static final String TRIBEREGISTRATION_ID="ID";
    public static final String TRIBEREGISTRATION="TribeRegistration";
    public static final String KILLYOURSELF="KillYourself";
    public static final String CREATEUNIT="CreateUnit";
    public static final String ALLOCATE_INITIALRESOURCES="initialResources";
    public static final String ALLOCATE_INITIALUNITS="initialUnits";
    public static final String ALLOCATE="Allocate";
    public static final String POSITION_Y="y";
    public static final String POSITION_X="x";
    public static final String POSITION="Position";
    public static final String RESOURCE_AMOUNT="amount";
    public static final String RESOURCE_TYPE="type";
    public static final String RESOURCE="Resource";
    public static final String TRIBE_ID="ID";
    public static final String TRIBE_NAME="Name";
    public static final String TRIBE="Tribe";
    public static final String UNIT_UNITID="unitID";
    public static final String UNIT_POSITION="position";
    public static final String UNIT_UNITOWNER="unitOwner";
    public static final String UNIT="Unit";
    public static final String REASON_DESCRIPTION="Description";
    public static final String REASON="Reason";

    /**
     * Constructor
     */
    private WoAOntology(){
        super(ONTOLOGY_NAME, BasicOntology.getInstance());
        try {

            // adding Concept(s)
            ConceptSchema reasonSchema = new ConceptSchema(REASON);
            add(reasonSchema, ontologies.Reason.class);
            ConceptSchema unitSchema = new ConceptSchema(UNIT);
            add(unitSchema, ontologies.Unit.class);
            ConceptSchema tribeSchema = new ConceptSchema(TRIBE);
            add(tribeSchema, ontologies.Tribe.class);
            ConceptSchema resourceSchema = new ConceptSchema(RESOURCE);
            add(resourceSchema, ontologies.Resource.class);
            ConceptSchema positionSchema = new ConceptSchema(POSITION);
            add(positionSchema, ontologies.Position.class);

            // adding AgentAction(s)
            AgentActionSchema allocateSchema = new AgentActionSchema(ALLOCATE);
            add(allocateSchema, ontologies.Allocate.class);
            AgentActionSchema createUnitSchema = new AgentActionSchema(CREATEUNIT);
            add(createUnitSchema, ontologies.CreateUnit.class);
            AgentActionSchema killYourselfSchema = new AgentActionSchema(KILLYOURSELF);
            add(killYourselfSchema, ontologies.KillYourself.class);
            AgentActionSchema tribeRegistrationSchema = new AgentActionSchema(TRIBEREGISTRATION);
            add(tribeRegistrationSchema, ontologies.TribeRegistration.class);

            // adding AID(s)

            // adding Predicate(s)


            // adding fields
            reasonSchema.add(REASON_DESCRIPTION, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
            unitSchema.add(UNIT_UNITOWNER, tribeSchema, ObjectSchema.MANDATORY);
            unitSchema.add(UNIT_POSITION, positionSchema, ObjectSchema.MANDATORY);
            unitSchema.add(UNIT_UNITID, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
            tribeSchema.add(TRIBE_NAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
            tribeSchema.add(TRIBE_ID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
            resourceSchema.add(RESOURCE_TYPE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
            resourceSchema.add(RESOURCE_AMOUNT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
            positionSchema.add(POSITION_X, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
            positionSchema.add(POSITION_Y, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
            allocateSchema.add(ALLOCATE_INITIALUNITS, unitSchema, 1, ObjectSchema.UNLIMITED);
            allocateSchema.add(ALLOCATE_INITIALRESOURCES, resourceSchema, 1, ObjectSchema.UNLIMITED);
            tribeRegistrationSchema.add(TRIBEREGISTRATION_ID, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);

            // adding name mappings

            // adding inheritance

        }catch (java.lang.Exception e) {e.printStackTrace();}
    }
}
